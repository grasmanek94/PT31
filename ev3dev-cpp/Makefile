empty:=

CFLAGS_RELEASE=-O3 -ggdb3
CFLAGS_DEBUG=-O0 -ggdb3 -Wall
CFLAGS_COMBINED_RELEASE=$(CFLAGS_RELEASE) $(CFLAGS)
CFLAGS_COMBINED_DEBUG=$(CFLAGS_DEBUG) $(CFLAGS)
SUFFIX_RELEASE=_REL
SUFFIX_DEBUG=_DBG

SUFFIX_SELECTED=
CFLAGS_SELECTED=

NO_CPP_CFLAGS_COMMON=$(CFLAGS_INCLUDE_DIRS) $(CFLAGS_SELECTED)

CFLAGS_STATIC_LIBRARY=-c
CFLAGS_INCLUDE_DIRS=-I.
CFLAGS_COMMON=-std=gnu++11 $(NO_CPP_CFLAGS_COMMON)

GOOGLE_TEST_INCLUDE_DIRS=-I./libraries/googletest -I./libraries/googletest/include
GOOGLE_TEST_SOURCES=./libraries/__linux__/google_test.cc
GOOGLE_TEST_LIBRARY=./libraries/__linux__/obj/google_test$(SUFFIX_SELECTED).o

GOOGLE_MOCK_INCLUDE_DIRS=-I./libraries/googlemock -I./libraries/googlemock/include $(GOOGLE_TEST_INCLUDE_DIRS)
GOOGLE_MOCK_SOURCES=./libraries/__linux__/google_mock.cc
GOOGLE_MOCK_LIBRARY=./libraries/__linux__/obj/google_mock$(SUFFIX_SELECTED).o

GLM_INCLUDE_DIRS=-I./libraries/glm
GLM_SOURCES=./libraries/__linux__/glm.cpp
GLM_LIBRARY=./libraries/__linux__/obj/glm$(SUFFIX_SELECTED).o

INCLUDE_DIRS_PROJECT=$(GLM_INCLUDE_DIRS) -I./project -I./project/lib
COMMON_INCLUDES=$(INCLUDE_DIRS_PROJECT)
COMMON_DEFINITIONS=

LIBPROJECT_INCLUDE_DIRS=$(INCLUDE_DIRS_PROJECT)
LIBPROJECT_SOURCES = $(shell find ./project/lib/ -name '*.c*')
LIBPROJECT_BASE_DIR =./libraries/__linux__/obj/
LIBPROJECT_OBJ_DIR=$(LIBPROJECT_BASE_DIR)libproject/
LIBPROJECT_OBJECTS = $(addprefix $(LIBPROJECT_OBJ_DIR),$(LIBPROJECT_SOURCES))
LIBPROJECT_LIBRARY=$(LIBPROJECT_BASE_DIR)libproject$(SUFFIX_SELECTED).a
LIBPROJECT_DEFINES=$(COMMON_DEFINITIONS)

COMMON_LIBRARIES=$(GLM_LIBRARY) $(LIBPROJECT_LIBRARY) -lpthread -ldl -lrt

APP_PROJECT_INCLUDE_DIRS=$(INCLUDE_DIRS_PROJECT)
APP_PROJECT_SOURCES = $(shell find ./project/ ! -path "./project/lib/*" -name '*.c*')
APP_PROJECT_BASE_DIR =./libraries/__linux__/
APP_PROJECT_OBJ_DIR=$(APP_PROJECT_BASE_DIR)obj/project/
APP_PROJECT_OBJECTS = $(addprefix $(APP_PROJECT_OBJ_DIR),$(APP_PROJECT_SOURCES))
APP_PROJECT_EXECUTABLE=$(APP_PROJECT_BASE_DIR)project$(SUFFIX_SELECTED).app
APP_PROJECT_DEFINES=$(COMMON_DEFINITIONS) -DPROJECT_APP
APP_PROJECT_LIBRARIES=$(COMMON_LIBRARIES)

TEST_INCLUDE_DIRS=$(INCLUDE_DIRS_PROJECT) $(GOOGLE_MOCK_INCLUDE_DIRS) 
TEST_SOURCES = $(shell find ./test/ -name '*.c*')
TEST_BASE_DIR =./libraries/__linux__/
TEST_OBJ_DIR=$(TEST_BASE_DIR)obj/test/
TEST_OBJECTS = $(addprefix $(TEST_OBJ_DIR),$(TEST_SOURCES))
TEST_EXECUTABLE=$(TEST_BASE_DIR)test$(SUFFIX_SELECTED).app
TEST_DEFINES=$(COMMON_DEFINITIONS) -DUNIT_TESTING_FRAMEWORK
TEST_LIBRARIES=$(COMMON_LIBRARIES) $(GOOGLE_TEST_LIBRARY) $(GOOGLE_MOCK_LIBRARY)

DEFAULT_CLEARER=

GPP=arm-none-linux-gnueabi-g++

ARCHIVE=ar rvs

all: r tr

GoogleTest: $(GOOGLE_TEST_SOURCES)
	@$(GPP) $(CFLAGS_COMMON) $(CFLAGS_STATIC_LIBRARY) $(GOOGLE_TEST_INCLUDE_DIRS) $(GOOGLE_TEST_SOURCES) -o $(GOOGLE_TEST_LIBRARY)
	
GoogleMock: $(GOOGLE_MOCK_SOURCES)
	@$(GPP) $(CFLAGS_COMMON) $(CFLAGS_STATIC_LIBRARY) $(GOOGLE_MOCK_INCLUDE_DIRS) $(GOOGLE_MOCK_SOURCES) -o $(GOOGLE_MOCK_LIBRARY)

GLM: $(GLM_SOURCES)
	@$(GPP) $(CFLAGS_COMMON) $(CFLAGS_STATIC_LIBRARY) $(GLM_INCLUDE_DIRS) $(GLM_SOURCES) -o $(GLM_LIBRARY)

LibProject: DEFAULT_CLEARER=$(LIBPROJECT_OBJ_DIR)
LibProject: COMMON_INCLUDES=$(LIBPROJECT_INCLUDE_DIRS)
LibProject: $(LIBPROJECT_OBJECTS)
	@$(ARCHIVE) $(LIBPROJECT_LIBRARY) $(addsuffix $(SUFFIX_SELECTED).o,$(addprefix ./,$^)) > /dev/null

AppProject: DEFAULT_CLEARER=$(APP_PROJECT_OBJ_DIR)
AppProject: COMMON_INCLUDES=$(APP_PROJECT_INCLUDE_DIRS)
AppProject: $(APP_PROJECT_OBJECTS)
	@$(GPP) $(CFLAGS_COMMON) $(CFLAGS_INCLUDE_DIRS) $(APP_PROJECT_INCLUDE_DIRS) $(addsuffix $(SUFFIX_SELECTED).o,$(addprefix ./,$^)) $(APP_PROJECT_LIBRARIES) -o $(APP_PROJECT_EXECUTABLE)

TestProject: DEFAULT_CLEARER=$(TEST_OBJ_DIR)
TestProject: COMMON_INCLUDES=$(TEST_INCLUDE_DIRS)
TestProject: $(TEST_OBJECTS)
	@$(GPP) $(CFLAGS_COMMON) $(CFLAGS_INCLUDE_DIRS) $(TEST_INCLUDE_DIRS) $(addsuffix $(SUFFIX_SELECTED).o,$(addprefix ./,$^)) $(TEST_LIBRARIES) -o $(TEST_EXECUTABLE)

.DEFAULT:
	@mkdir -p ./$(@D)
	@$(GPP) $(CFLAGS_COMMON) $(CFLAGS_STATIC_LIBRARY) $(CFLAGS_INCLUDE_DIRS) $(COMMON_INCLUDES) ./$(subst $(DEFAULT_CLEARER),$(empty),./$@) -o ./$@$(SUFFIX_SELECTED).o

clean:
	@rm -rf ./libraries/__linux__/obj/*
	@rm -rf ./libraries/__linux__/*.app

d td: SUFFIX_SELECTED=$(SUFFIX_DEBUG)
d td: CFLAGS_SELECTED=$(CFLAGS_COMBINED_DEBUG)

r tr: SUFFIX_SELECTED=$(SUFFIX_RELEASE)
r tr: CFLAGS_SELECTED=$(CFLAGS_COMBINED_RELEASE)

d r: GLM LibProject AppProject

td tr: GoogleTest GoogleMock GLM LibProject TestProject
#	valgrind $(TEST_EXECUTABLE)
